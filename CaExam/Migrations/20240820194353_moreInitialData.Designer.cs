// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CaExam.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240820194353_moreInitialData")]
    partial class moreInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaExam.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartamentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4efbcdba-e68d-4d5c-b5d5-d204aea0c820"),
                            ApartamentNumber = "96119",
                            City = "New Willfort",
                            HouseNumber = "5833",
                            UserId = new Guid("b60448a5-c635-447b-8b58-8d529b7f3651"),
                            street = "Lesly Ports"
                        },
                        new
                        {
                            Id = new Guid("d416bc4f-6359-458d-bbc0-33f64aac4b61"),
                            ApartamentNumber = "572",
                            City = "North Mike",
                            HouseNumber = "761",
                            UserId = new Guid("e8b43192-251f-4ecd-97ce-a44b38f087bc"),
                            street = "Darrin Pike"
                        },
                        new
                        {
                            Id = new Guid("68ff04ed-8bdb-47c9-91b8-987cd36c789c"),
                            ApartamentNumber = "71930",
                            City = "Bartellchester",
                            HouseNumber = "747",
                            UserId = new Guid("dc074a65-c9a8-4771-81cd-0e42f4b20185"),
                            street = "Arnold Rest"
                        },
                        new
                        {
                            Id = new Guid("c2fa9d2a-d565-4650-9fe8-b2fcf35d1929"),
                            ApartamentNumber = "741",
                            City = "Lanceport",
                            HouseNumber = "80818",
                            UserId = new Guid("5d157de3-314e-4c7d-9565-b1730abc81c0"),
                            street = "Hazel Prairie"
                        });
                });

            modelBuilder.Entity("CaExam.Models.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("402b9a3a-5690-4138-aa9d-10ccd256e87c"),
                            Email = "Larry99@yahoo.com",
                            Name = "Larry",
                            PersonalIdNumber = "199809233498",
                            PhoneNumber = "1-822-629-7403",
                            PicturePath = "somewhere in server",
                            Surname = "Cummings",
                            UserId = new Guid("b60448a5-c635-447b-8b58-8d529b7f3651")
                        },
                        new
                        {
                            Id = new Guid("17ca93ac-766f-41f6-a30c-7c0125566500"),
                            Email = "Larry99@yahoo.com",
                            Name = "Larry",
                            PersonalIdNumber = "199809233498",
                            PhoneNumber = "784-720-2857 x76427",
                            PicturePath = "somewhere in server",
                            Surname = "Cummings",
                            UserId = new Guid("e8b43192-251f-4ecd-97ce-a44b38f087bc")
                        },
                        new
                        {
                            Id = new Guid("4c286d5c-6ede-4c15-8c79-b809406e1509"),
                            Email = "Larry99@yahoo.com",
                            Name = "Larry",
                            PersonalIdNumber = "199809233498",
                            PhoneNumber = "(518) 452-2954 x3649",
                            PicturePath = "somewhere in server",
                            Surname = "Cummings",
                            UserId = new Guid("dc074a65-c9a8-4771-81cd-0e42f4b20185")
                        },
                        new
                        {
                            Id = new Guid("02ce0718-a9a8-4d92-9684-5ee2b8db642a"),
                            Email = "Larry99@yahoo.com",
                            Name = "Larry",
                            PersonalIdNumber = "199809233498",
                            PhoneNumber = "(991) 960-0384",
                            PicturePath = "somewhere in server",
                            Surname = "Cummings",
                            UserId = new Guid("5d157de3-314e-4c7d-9565-b1730abc81c0")
                        });
                });

            modelBuilder.Entity("CaExam.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b60448a5-c635-447b-8b58-8d529b7f3651"),
                            Password = new byte[] { 236, 72, 48, 219, 225, 69, 39, 94, 21, 33, 50, 0, 78, 118, 199, 124, 138, 56, 136, 60, 36, 231, 255, 41, 199, 252, 106, 221, 11, 243, 78, 75 },
                            Role = 0,
                            Salt = new byte[] { 140, 34, 163, 86, 75, 16, 205, 187, 20, 9, 121, 242, 13, 59, 103, 132 },
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("5d157de3-314e-4c7d-9565-b1730abc81c0"),
                            Password = new byte[] { 216, 236, 72, 99, 227, 209, 156, 21, 182, 244, 246, 52, 200, 218, 12, 63, 126, 60, 219, 210, 185, 236, 11, 99, 46, 133, 217, 138, 27, 226, 188, 193 },
                            Role = 2,
                            Salt = new byte[] { 81, 246, 140, 13, 87, 98, 16, 21, 181, 118, 44, 232, 198, 72, 24, 111 },
                            Username = "userGuest"
                        },
                        new
                        {
                            Id = new Guid("e8b43192-251f-4ecd-97ce-a44b38f087bc"),
                            Password = new byte[] { 109, 57, 248, 119, 58, 198, 34, 137, 72, 207, 130, 102, 251, 182, 35, 53, 84, 150, 84, 187, 114, 77, 109, 177, 218, 147, 80, 24, 202, 86, 139, 104 },
                            Role = 1,
                            Salt = new byte[] { 72, 196, 101, 31, 129, 84, 183, 140, 205, 194, 186, 91, 148, 49, 221, 151 },
                            Username = "userUser"
                        },
                        new
                        {
                            Id = new Guid("dc074a65-c9a8-4771-81cd-0e42f4b20185"),
                            Password = new byte[] { 85, 12, 204, 170, 52, 8, 37, 12, 235, 89, 239, 214, 34, 116, 57, 182, 172, 71, 16, 77, 140, 68, 221, 159, 30, 60, 83, 196, 118, 153, 58, 150 },
                            Role = 1,
                            Salt = new byte[] { 36, 27, 66, 160, 153, 24, 3, 13, 59, 112, 225, 113, 68, 176, 117, 118 },
                            Username = "userUser1"
                        });
                });

            modelBuilder.Entity("CaExam.Models.Address", b =>
                {
                    b.HasOne("CaExam.Models.UserModel", "User")
                        .WithOne("Address")
                        .HasForeignKey("CaExam.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaExam.Models.UserDetails", b =>
                {
                    b.HasOne("CaExam.Models.UserModel", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("CaExam.Models.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaExam.Models.UserModel", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("UserDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
